---
import Layout from "./Layout.astro";
import { dateFormatter } from "../utils/dateFormatter.mjs";

const { frontmatter, headings } = Astro.props;

// Logic to find and display 3 related posts:

// Get all of the posts
const allPosts = Object.values(
	import.meta.glob("../pages/writing/*.md", { eager: true }),
);

// 1. Filter for posts that have one tag in common with the current post, excluding the current post
// 2. Sort the filtered posts in descending order by pubDate
// 3. Only keep the 3 most recent posts
const relatedPosts = allPosts
	.filter((post: any) => {
		return (
			post.frontmatter.title !== frontmatter.title &&
			post.frontmatter.tags.some((tag: string) =>
				frontmatter.tags.includes(tag),
			)
		);
	})
	.sort((a: any, b: any) => {
		return b.frontmatter.pubDate.localeCompare(a.frontmatter.pubDate);
	})
	.slice(0, 3);
---

<Layout pageTitle={frontmatter.title}>
	<div class="wrapper">
		<header class="switcher border" data-wrapper-type="inner">
			<div>
				<p>{frontmatter.category}</p>
				<h1>{frontmatter.title}</h1>
				<small>
					<time datetime={frontmatter.pubDate}
						>{dateFormatter(frontmatter.pubDate)}</time
					>
				</small>
			</div>
			<div>
				<p>Topics</p>
				<ul>
					{frontmatter.tags.map((tag: string) => <li>{tag}</li>)}
				</ul>
			</div>
			<nav aria-label="article navigation">
				<p>Table of contents</p>
				<ol>
					{
						// Map headings
						headings.map((heading: any, index: number) => {
							// Only process h2 headings
							if (heading.depth === 2) {
								// Find all h3 headings that come after the current h2
								let subHeadings: any[] = [];
								for (
									let i = index + 1;
									i < headings.length;
									i++
								) {
									const subHeading = headings[i];
									// Stop getting h3s when another h2 is found
									if (subHeading.depth === 2) break;
									if (subHeading.depth === 3)
										subHeadings.push(subHeading);
								}

								// Only show a nested list if there are h3 subheadings
								return (
									<li>
										<a href={`#${heading.slug}`}>
											{heading.text}
										</a>

										{subHeadings.length > 0 && (
											<ol>
												{subHeadings.map(
													(subHeading: any) => (
														<li>
															<a
																href={`#${subHeading.slug}`}
															>
																{
																	subHeading.text
																}
															</a>
														</li>
													),
												)}
											</ol>
										)}
									</li>
								);
							}

							return null;
						})
					}

					{
						// Show a link to related posts if there are any
						relatedPosts.length > 0 && (
							<li>
								<a href="#related-posts">Related posts</a>
							</li>
						)
					}
				</ol>
			</nav>
		</header>
	</div>
	<article class="wrapper prose">
		<div class="region border flow">
			<p class="lede">
				<em>{frontmatter.description}</em>
			</p>
			<slot />
		</div>
		{
			// Show related posts if there are any
			relatedPosts.length > 0 && (
				<div class="region border flow">
					<h2 id="related-posts">Related posts</h2>
					<ul>
						{relatedPosts.map((post: any) => (
							<li>
								<a href={post.url}>{post.frontmatter.title}</a>
							</li>
						))}
					</ul>
				</div>
			)
		}
		<div class="region flow">
			<p><a href="/writing/">Back to writing</a></p>
		</div>
	</article>
</Layout>
