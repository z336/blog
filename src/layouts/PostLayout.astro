---
import Layout from "./Layout.astro";
import { dateFormatter } from "../utils/dateFormatter.mjs";

const { frontmatter, headings } = Astro.props;

// Logic to find and display 3 related posts:

// Get all of the posts
const allPosts = Object.values(
	import.meta.glob("../pages/writing/*.md", { eager: true }),
);

// 1. Filter for posts that have one tag in common with the current post
// 2. Sort the filtered posts in descending order
// 3. Only show the 3 most recent related posts
const relatedPosts = allPosts
	.filter((post: any) => {
		return (
			post.frontmatter.title !== frontmatter.title &&
			post.frontmatter.tags.some((tag: string) =>
				frontmatter.tags.includes(tag),
			)
		);
	})
	.sort((a: any, b: any) => {
		return b.frontmatter.pubDate.localeCompare(a.frontmatter.pubDate);
	})
	.slice(0, 3);
---

<Layout pageTitle={frontmatter.title}>
	<div class="wrapper">
		<header class="switcher border" data-wrapper-type="inner">
			<div>
				<p>{frontmatter.category}</p>
				<h1>{frontmatter.title}</h1>
				<small>
					<time datetime={frontmatter.pubDate}
						>{dateFormatter(frontmatter.pubDate)}</time
					>
				</small>
			</div>
			<div>
				<p>Topics</p>
				<ul>
					{frontmatter.tags.map((tag: string) => <li>{tag}</li>)}
				</ul>
			</div>
			<nav aria-label="article navigation">
				<p>Table of contents</p>
				<ol>
					{
						// Find all of the headings and subheadings (h2s and h3s) and display them in a list of links. A nested list is created for h3's.
						headings.map((heading: any) => {
							if (heading.depth === 2) {
								const subHeadings = headings.filter(
									(subHeading: any) =>
										subHeading.depth === 3 &&
										headings.indexOf(subHeading) >
											headings.indexOf(heading), // Check that the h3 comes after the h2 so as to not pull h3s from other sections
								);

								return (
									<li>
										<a href={`#${heading.slug}`}>
											{heading.text}
										</a>

										{subHeadings.length > 0 && ( // If there are h3s to show, put them in a nested list
											<ol>
												{subHeadings.map(
													(subHeading: any) => {
														return (
															<li>
																<a
																	href={`#${subHeading.slug}`}
																>
																	{
																		subHeading.text
																	}
																</a>
															</li>
														);
													},
												)}
											</ol>
										)}
									</li>
								);
							}

							return null; // Don't make the nested ol if there aren't h3's to show
						})
					}

					{
						// If there are related posts, show a link to the section, otherwise null
						relatedPosts.length > 0 && (
							<li>
								<a href="#related-posts">Related posts</a>
							</li>
						)
					}
				</ol>
			</nav>
		</header>
	</div>
	<article class="wrapper prose">
		<div class="region border flow">
			<p class="lede">
				<em>{frontmatter.description}</em>
			</p>
			<slot />
		</div>
		{
			// If there are related posts, show this section, otherwise null
			relatedPosts.length > 0 && (
				<div class="region border flow">
					<h2 id="related-posts">Related posts</h2>
					<ul>
						{relatedPosts.map((post: any) => (
							<li>
								<a href={post.url}>{post.frontmatter.title}</a>
							</li>
						))}
					</ul>
				</div>
			)
		}
		<div class="region flow">
			<p><a href="/writing/">Back to writing</a></p>
		</div>
	</article>
</Layout>
