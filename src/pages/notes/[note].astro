---
import Layout from "../../layouts/Layout.astro";
import data from "./_notes.json";
import { dateFormatter } from "../../utils/dateFormatter.mjs";

export async function getStaticPaths() {
	const allNotes = data;

	// Generate the paths from the `title` of each note
	const paths = allNotes.map((note) => ({
		params: { note: note.title.toLowerCase().replace(/\s+/g, "-") }, // Using "note" as the dynamic parameter
		props: { notes: allNotes },
	}));

	return paths;
}

const { note } = Astro.params; // Use "note" as the dynamic parameter
const { notes } = Astro.props;

// Find the original note object based on the slug (hyphenated version)
const filteredNotes = notes.filter(
	(noteItem) => noteItem.title.toLowerCase().replace(/\s+/g, "-") === note,
);

// Extract the original title from the first filtered note (assuming there's only one match)
const title = filteredNotes[0]?.title;
---

<Layout pageTitle={title}>
	<div class="wrapper">
		<!-- Making an exception here to NOT use the PageHeader component â€” it is simpler than writing a bunch of logic just to change the h1 font size on individual Notes. -->
		<header class="border flow" data-wrapper-type="inner">
			<h1>{title}</h1>
		</header>
		<article class="prose flow" data-wrapper-type="inner">
			{
				filteredNotes.map((note) => (
					<>
						<small>
							<time datetime={note.pubDate}>
								{dateFormatter(note.pubDate)}
							</time>
						</small>
						{/*set:html allows passing HTML from the JSON string*/}
						<p set:html={note.description} />
					</>
				))
			}
			<p><a href="/notes/">Back to the notes</a></p>
		</article>
	</div>
</Layout>
